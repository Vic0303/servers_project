@startuml

!theme vibrant
hide empty members

class Product {
 + name: str
 + price: int
 + __init__(name: str, price: float)
 + __eq__(other: Product) : bool
 + __hash__() : int
}

exception TooManyProductsFoundError{
 + massage: str
 + __init__(message: str="Too many products found")
}

abstract class Server{
 + {static} n_max_returned_entries: int = 5
 + __init__(*args, **kwargs) 
 + get_entries(n_letters: int = 1): List[Product] 
 - {abstract} __get_products_list(n_letters: int = 1): List[Product]
}

class ListServer{
 - __products: List[Product]
 + __init__(products: List[Product], *args, **kwargs)
 - __get_products_list(n_letters: int = 1): List[Product]
}

class MapServer{
 - __products: Dict[str, Product]
 + __init__(products: List[Product], *args, **kwargs) 
 - __get_products_list(n_letters: int = 1): List[Product]
}

class Client{
 + server: Server
 + __init__(server: Server) 
 + get_total_price(n_letters: Optional[int]) : Optional[float]
}

class NotImplementedError
class ValueError 

MapServer *-- Product
ListServer *-- Product
Client *-- Server


Server <|-- ListServer
Server <|-- MapServer

TooManyProductsFoundError <.. Server : <<throws>>
TooManyProductsFoundError <|-- Exception

NotImplementedError <.. Server : <<raises>>
ValueError <.. Product : <<raises>>

@enduml